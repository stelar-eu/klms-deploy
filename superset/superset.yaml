---
# Source: superset/templates/secret-env.yaml
apiVersion: v1
kind: Secret
metadata:
  name: stelar-superset-env
  namespace: default
  labels:
    app: stelar-superset
    chart: superset-0.12.9
    release: "stelar"
    heritage: "Helm"
type: Opaque
stringData:
    REDIS_HOST: "redis"
    REDIS_USER: ""
    REDIS_PORT: "6379"
    REDIS_PROTO: "redis"
    REDIS_DB: "4"
    REDIS_CELERY_DB: "5"
    DB_HOST: "db"
    DB_PORT: "5432"
    DB_USER: "superset"
    DB_PASS: "superset"
    DB_NAME: "superset"
---
# Source: superset/templates/secret-superset-config.yaml
apiVersion: v1
kind: Secret
metadata:
  name: stelar-superset-config
  namespace: default
  labels:
    app: stelar-superset
    chart: superset-0.12.9
    release: "stelar"
    heritage: "Helm"
type: Opaque
stringData:
  superset_config.py: |
    
    import os
    from flask_caching.backends.rediscache import RedisCache
    
    def env(key, default=None):
        return os.getenv(key, default)
    
    # Redis Base URL
    REDIS_BASE_URL=f"{env('REDIS_PROTO')}://{env('REDIS_HOST')}:{env('REDIS_PORT')}"
    
    # Redis URL Params
    REDIS_URL_PARAMS = ""
    
    # Build Redis URLs
    CACHE_REDIS_URL = f"{REDIS_BASE_URL}/{env('REDIS_DB', 1)}{REDIS_URL_PARAMS}"
    CELERY_REDIS_URL = f"{REDIS_BASE_URL}/{env('REDIS_CELERY_DB', 0)}{REDIS_URL_PARAMS}"
    
    MAPBOX_API_KEY = env('MAPBOX_API_KEY', '')
    CACHE_CONFIG = {
          'CACHE_TYPE': 'RedisCache',
          'CACHE_DEFAULT_TIMEOUT': 300,
          'CACHE_KEY_PREFIX': 'superset_',
          'CACHE_REDIS_URL': CACHE_REDIS_URL,
    }
    DATA_CACHE_CONFIG = CACHE_CONFIG
    
    SQLALCHEMY_DATABASE_URI = f"postgresql+psycopg2://{env('DB_USER')}:{env('DB_PASS')}@{env('DB_HOST')}:{env('DB_PORT')}/{env('DB_NAME')}"
    SQLALCHEMY_TRACK_MODIFICATIONS = True
    
    class CeleryConfig:
      imports  = ("superset.sql_lab", )
      broker_url = CELERY_REDIS_URL
      result_backend = CELERY_REDIS_URL
    
    CELERY_CONFIG = CeleryConfig
    RESULTS_BACKEND = RedisCache(
          host=env('REDIS_HOST'),
          port=env('REDIS_PORT'),
          key_prefix='superset_results',
    )
    
    
    
    
  superset_init.sh: |
    #!/bin/sh
    set -eu
    echo "Upgrading DB schema..."
    superset db upgrade
    echo "Initializing roles..."
    superset init
    
    echo "Creating admin user..."
    superset fab create-admin \
                    --username admin \
                    --firstname Superset \
                    --lastname Admin \
                    --email admin@superset.com \
                    --password admin \
                    || true
    
    if [ -f "/app/configs/import_datasources.yaml" ]; then
      echo "Importing database connections.... "
      superset import_datasources -p /app/configs/import_datasources.yaml
    fi
  superset_bootstrap.sh: |
    #!/bin/bash
    if [ ! -f ~/bootstrap ]; then echo "Running Superset with uid 0" > ~/bootstrap; fi
---
# Source: superset/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: stelar-superset
  namespace: default
  labels:
    app: superset
    chart: superset-0.12.9
    release: stelar
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8088
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: superset
    release: stelar
---
# Source: superset/templates/deployment-worker.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stelar-superset-worker
  namespace: default
  labels:
    app: superset-worker
    chart: superset-0.12.9
    release: stelar
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: superset-worker
      release: stelar
  template:
    metadata:
      annotations:
        checksum/superset_config.py: 645f8b44e6f772a77ab5910009c2790dc7fa8a372bb685e15183e1b2b88f2ea1
        checksum/superset_bootstrap.sh: dc9a47141051ced34960c313860a55e03eb48c1fa36a0ed25c03ad60cd3b5c48
        checksum/connections: 4481235176bcfc0e0a1408a406e74106f7e6f9debd3265a8a6d96ee667bf55bb
        checksum/extraConfigs: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/extraSecrets: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/extraSecretEnv: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/configOverrides: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/configOverridesFiles: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
      labels:
        app: superset-worker
        release: stelar
    spec:
      securityContext:
        runAsUser: 0
      initContainers:
      - command:
        - /bin/sh
        - -c
        - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -wait "tcp://$REDIS_HOST:$REDIS_PORT"
          -timeout 120s
        envFrom:
        - secretRef:
            name: 'stelar-superset-env'
        image: 'apache/superset:dockerize'
        imagePullPolicy: 'IfNotPresent'
        name: wait-for-postgres-redis
      containers:
        - name: superset
          image: "apache/superset:4.0.0"
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh","-c",". /app/pythonpath/superset_bootstrap.sh; celery --app=superset.tasks.celery_app:app worker"]
          env:
            - name: "SUPERSET_PORT"
              value: "8088"
          envFrom:
            - secretRef:
                name: "stelar-superset-env"
          volumeMounts:
            - name: superset-config
              mountPath: "/app/pythonpath"
              readOnly: true
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - celery -A superset.tasks.celery_app:app inspect ping -d celery@$HOSTNAME
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 60
          resources:
            {}
      volumes:
        - name: superset-config
          secret:
            secretName: stelar-superset-config
---
# Source: superset/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stelar-superset
  namespace: default
  labels:
    app: superset
    chart: superset-0.12.9
    release: stelar
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: superset
      release: stelar
  template:
    metadata:
      annotations:
        # Force reload on config changes
        checksum/superset_config.py: 645f8b44e6f772a77ab5910009c2790dc7fa8a372bb685e15183e1b2b88f2ea1
        checksum/superset_init.sh: e6b1e8eac1f7a79a07a6c72a0e2ee6e09654eeb439c6bbe61bfd676917c41e02
        checksum/superset_bootstrap.sh: dc9a47141051ced34960c313860a55e03eb48c1fa36a0ed25c03ad60cd3b5c48
        checksum/connections: 4481235176bcfc0e0a1408a406e74106f7e6f9debd3265a8a6d96ee667bf55bb
        checksum/extraConfigs: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/extraSecrets: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/extraSecretEnv: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/configOverrides: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
        checksum/configOverridesFiles: 44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a
      labels:
        app: superset
        release: stelar
    spec:
      securityContext:
        runAsUser: 0
      initContainers:
      - command:
        - /bin/sh
        - -c
        - dockerize -wait "tc p://$DB_HOST:$DB_PORT" -timeout 120s
        envFrom:
        - secretRef:
            name: 'stelar-superset-env'
        image: 'apache/superset:dockerize'
        imagePullPolicy: 'IfNotPresent'
        name: wait-for-postgres
      containers:
        - name: superset
          image: "apache/superset:4.0.0"
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh","-c",". /app/pythonpath/superset_bootstrap.sh; /usr/bin/run-server.sh"]
          env:
            - name: "SUPERSET_PORT"
              value: "8088"
          envFrom:
            - secretRef:
                name: "stelar-superset-env"
          volumeMounts:
            - name: superset-config
              mountPath: "/app/pythonpath"
              readOnly: true
          ports:
            - name: http
              containerPort: 8088
              protocol: TCP
          startupProbe:
            failureThreshold: 60
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 15
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 15
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 15
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            {}
      volumes:
        - name: superset-config
          secret:
            secretName: stelar-superset-config
---
# Source: superset/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: stelar-superset
  namespace: default
  labels:
    app: superset
    chart: superset-0.12.9
    release: stelar
    heritage: Helm
spec:
  ingressClassName: nginx
  rules:
    - host: stelar.vsamtuc.top
      http:
        paths:
          - path: /dash
            pathType: Prefix
            backend:
              service:
                name: stelar-superset
                port:
                  name: http
---
# Source: superset/templates/init-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: stelar-superset-init-db
  namespace: default
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  template:
    metadata:
      name: stelar-superset-init-db
    spec:
      securityContext:
        runAsUser: 0
      initContainers:
      - command:
        - /bin/sh
        - -c
        - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -timeout 120s
        envFrom:
        - secretRef:
            name: 'stelar-superset-env'
        image: 'apache/superset:dockerize'
        imagePullPolicy: 'IfNotPresent'
        name: wait-for-postgres
      containers:
      - name: superset-init-db
        image: "apache/superset:4.0.0"
        envFrom:
          - secretRef:
              name: stelar-superset-env
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: superset-config
            mountPath: "/app/pythonpath"
            readOnly: true
        command: ["/bin/sh","-c",". /app/pythonpath/superset_bootstrap.sh; . /app/pythonpath/superset_init.sh"]
        resources:
          {}
      volumes:
        - name: superset-config
          secret:
            secretName: stelar-superset-config
      restartPolicy: Never
